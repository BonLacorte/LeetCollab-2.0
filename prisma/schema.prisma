// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    userId          String        @id @default(uuid())
    name            String
    username        String        @unique
    email           String        @unique
    role            Role          @default(USER)
    password        String
    image           String?
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    // Relations
    likedProblems   LikedProblems[]
    solvedProblems  SolvedProblems[]
    starredProblems StarredProblems[]
    submissions     Submission[]
    accounts        Account[]
    sessions        Session[]
}

model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?  @db.Text
    access_token       String?  @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?  @db.Text
    session_state      String?

    user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Problem {
    problemId       String          @id @default(uuid())
    idTitle         String          @unique
    title           String          @unique
    category        String
    difficulty      String
    order           Int
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    // Relations
    likedProblems         LikedProblems[]
    solvedProblems        SolvedProblems[]
    starredProblems       StarredProblems[]
    problemSet           ProblemSet[]
    submissions           Submission[]
}

model Set {
    setId           String          @id @default(uuid())
    setTitle        String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    // Relations
    problemSets     ProblemSet[]
}

model ProblemSet {
    problemSetId    String          @id @default(uuid())
    problemId       String
    setId           String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    // Relations
    problem         Problem         @relation(fields: [problemId], references: [problemId])
    set             Set             @relation(fields: [setId], references: [setId])

    @@unique([problemId, setId])
}

model LikedProblems {
    likedProblemId  String          @id @default(uuid())
    userId          String
    problemId       String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    // Relations
    user            User            @relation(fields: [userId], references: [userId])
    problem         Problem         @relation(fields: [problemId], references: [problemId])

    @@unique([userId, problemId])
}

model SolvedProblems {
    solvedProblemId String          @id @default(uuid())
    userId          String
    problemId       String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    // Relations
    user            User            @relation(fields: [userId], references: [userId])
    problem         Problem         @relation(fields: [problemId], references: [problemId])

    @@unique([userId, problemId])
}

model StarredProblems {
    starredProblemId String          @id @default(uuid())
    userId           String
    problemId        String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    // Relations
    user             User            @relation(fields: [userId], references: [userId])
    problem          Problem         @relation(fields: [problemId], references: [problemId])

    @@unique([userId, problemId])
}

model Submission {
    submissionId    String          @id @default(uuid())
    userId          String
    problemId       String
    status          String
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    // Relations
    user            User            @relation(fields: [userId], references: [userId])
    problem         Problem         @relation(fields: [problemId], references: [problemId])

    // @@unique([userId, problemId])
}

enum Role {
    ADMIN
    USER
}